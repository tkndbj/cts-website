"use client";

import { useEffect, useRef } from "react";
import * as THREE from "three";

/**
 * Scroll-driven landing page (Next.js 15 + Three.js)
 * - Fixed WebGL canvas behind content
 * - 3 scenes ('city', 'rings', 'houses') crossfade on scroll
 * - No SSR/hydration pitfalls: all browser APIs live in effects
 * - Single file; only dependency is 'three'
 */

export default function Page() {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  useEffect(() => {
    const canvas = canvasRef.current!;
    const renderer = new THREE.WebGLRenderer({
      canvas,
      antialias: true,
      alpha: true,
      powerPreference: "high-performance",
    });
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    const scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0x0b0b12, 20, 80);

    const camera = new THREE.PerspectiveCamera(
      55,
      window.innerWidth / window.innerHeight,
      0.1,
      200
    );
    camera.position.set(0, 2.2, 14);

    // Lights
    const amb = new THREE.AmbientLight(0xffffff, 0.5);
    const dir = new THREE.DirectionalLight(0xffffff, 1.1);
    dir.position.set(5, 8, 6);
    dir.castShadow = false;
    scene.add(amb, dir);

    // ---------- Materials helpers ----------
    const makeStd = (color: number, transparent = true, opacity = 1) =>
      new THREE.MeshStandardMaterial({
        color,
        roughness: 0.35,
        metalness: 0.6,
        transparent,
        opacity,
      });

    // ---------- GROUP #1: Skyline (procedural “city”) ----------
    const cityGroup = new THREE.Group();
    const blocks: THREE.Mesh[] = [];
    const grid = 14;
    const spacing = 1.1;

    const boxGeo = new THREE.BoxGeometry(0.9, 1, 0.9);
    for (let x = -grid / 2; x < grid / 2; x++) {
      for (let z = -grid / 2; z < grid / 2; z++) {
        const dx = x / (grid / 2);
        const dz = z / (grid / 2);
        const dist = Math.sqrt(dx * dx + dz * dz);
        // Height shaped by distance & sin ripples for variety
        const h =
          0.3 +
          Math.max(0, 1.4 - dist) * 6 +
          Math.sin((x * 0.7) ^ (z * 0.5)) * 0.5;

        const m = makeStd(0x4cc9f0, true, 0); // start invisible, will fade in
        const b = new THREE.Mesh(boxGeo, m);
        b.position.set(x * spacing, h * 0.5, z * spacing);
        b.scale.y = 0.001; // rise animation based on scroll
        blocks.push(b);
        cityGroup.add(b);
      }
    }
    // Ground
    const ground = new THREE.Mesh(
      new THREE.CylinderGeometry(grid * 1.3, grid * 1.3, 0.2, 64),
      new THREE.MeshStandardMaterial({
        color: 0x0e0e18,
        roughness: 1,
        metalness: 0,
      })
    );
    ground.position.y = -0.12;
    ground.receiveShadow = false;
    cityGroup.add(ground);
    scene.add(cityGroup);

    // ---------- GROUP #2: Electric Rings / TorusKnots ----------
    const ringsGroup = new THREE.Group();
    const ringMatA = new THREE.MeshStandardMaterial({
      color: 0xf72585,
      metalness: 0.7,
      roughness: 0.15,
      emissive: new THREE.Color(0xf72585),
      emissiveIntensity: 0.4,
      transparent: true,
      opacity: 0,
    });
    const ringMatB = ringMatA.clone();
    ringMatB.color = new THREE.Color(0x7209b7);
    ringMatB.emissive = new THREE.Color(0x7209b7);

    const torusA = new THREE.Mesh(
      new THREE.TorusKnotGeometry(3.5, 0.18, 300, 20, 2, 3),
      ringMatA
    );
    const torusB = new THREE.Mesh(
      new THREE.TorusKnotGeometry(2.3, 0.15, 250, 20, 1, 7),
      ringMatB
    );
    torusA.rotation.set(0.3, 0.2, 0.1);
    torusB.rotation.set(-0.4, -0.1, 0.2);
    ringsGroup.add(torusA, torusB);

    // Sparkly particles around rings
    const sparks = (() => {
      const count = 1200;
      const pos = new Float32Array(count * 3);
      for (let i = 0; i < count; i++) {
        const r = 6 + Math.random() * 2.2;
        const phi = Math.random() * Math.PI * 2;
        const theta = Math.acos(2 * Math.random() - 1);
        pos[i * 3 + 0] = r * Math.sin(theta) * Math.cos(phi);
        pos[i * 3 + 1] = r * Math.cos(theta) * 0.6;
        pos[i * 3 + 2] = r * Math.sin(theta) * Math.sin(phi);
      }
      const geo = new THREE.BufferGeometry();
      geo.setAttribute("position", new THREE.BufferAttribute(pos, 3));
      const mat = new THREE.PointsMaterial({
        size: 0.06,
        transparent: true,
        opacity: 0,
        depthWrite: false,
      });
      return new THREE.Points(geo, mat);
    })();
    ringsGroup.add(sparks);
    scene.add(ringsGroup);

    // ---------- GROUP #3: Houses ring (construction theme) ----------
    const housesGroup = new THREE.Group();
    const houseCount = 18;

    const baseMat = makeStd(0x90e0ef, true, 0);
    const roofMat = makeStd(0x4361ee, true, 0);

    const mkHouse = () => {
      const g = new THREE.Group();
      const body = new THREE.Mesh(
        new THREE.BoxGeometry(1.2, 0.9, 1),
        baseMat.clone()
      );
      body.position.y = 0.45;

      const roof = new THREE.Mesh(
        new THREE.ConeGeometry(0.95, 0.7, 4),
        roofMat.clone()
      );
      roof.position.y = 1.1;
      roof.rotation.y = Math.PI * 0.25;

      // door
      const door = new THREE.Mesh(
        new THREE.BoxGeometry(0.28, 0.45, 0.06),
        makeStd(0x0b132b, true, 0)
      );
      door.position.set(0, 0.25, 0.53);

      g.add(body, roof, door);
      return g;
    };

    for (let i = 0; i < houseCount; i++) {
      const h = mkHouse();
      const angle = (i / houseCount) * Math.PI * 2;
      const R = 6.9;
      h.position.set(Math.cos(angle) * R, 0, Math.sin(angle) * R);
      h.lookAt(0, 0.7, 0);
      h.rotation.y += Math.PI; // face outward a bit more
      housesGroup.add(h);
    }
    scene.add(housesGroup);

    // ---------- Resize ----------
    const resize = () => {
      const w = window.innerWidth;
      const h = window.innerHeight;
      renderer.setSize(w, h, false);
      camera.aspect = w / h;
      camera.updateProjectionMatrix();
    };
    resize();
    window.addEventListener("resize", resize, { passive: true });

    // ---------- Scroll & pointer ----------
    let scrollY = 0;
    let targetScrollY = 0;
    const onScroll = () => {
      targetScrollY = window.scrollY;
    };
    window.addEventListener("scroll", onScroll, { passive: true });

    const pointer = { x: 0, y: 0, tx: 0, ty: 0 };
    const onPointerMove = (e: PointerEvent) => {
      pointer.tx = (e.clientX / window.innerWidth - 0.5) * 2;
      pointer.ty = (e.clientY / window.innerHeight - 0.5) * 2;
    };
    window.addEventListener("pointermove", onPointerMove, { passive: true });

    // ---------- Helpers ----------
    const clamp = (v: number, min = 0, max = 1) =>
      Math.min(Math.max(v, min), max);
    const smooth = (t: number) => t * t * (3 - 2 * t); // smoothstep(0..1)
    const crossfade = (idx: number, prog: number) => {
      // prog ~ sections: 0..1..2.. (N-1)
      const d = Math.abs(prog - idx);
      return smooth(clamp(1 - d, 0, 1));
    };

    const setGroupOpacity = (root: THREE.Object3D, o: number) => {
      root.traverse((obj) => {
        const mesh = obj as THREE.Mesh;
        const mat = mesh.material as THREE.Material | THREE.Material[];
        if (!mat) return;
        if (Array.isArray(mat)) {
          mat.forEach((m) => {
            if ("opacity" in m) {
              const material = m as THREE.MeshStandardMaterial;
              material.opacity = o;
              material.transparent = true;
              material.depthWrite = o >= 0.99;
            }
          });
        } else if ("opacity" in mat) {
          const material = mat as THREE.MeshStandardMaterial;
          material.opacity = o;
          material.transparent = true;
          material.depthWrite = o >= 0.99;
        }
      });
    };

    // ---------- Animation loop ----------
    const clock = new THREE.Clock();

    const tick = () => {
      renderer.setAnimationLoop(tick);

      // Easing scroll to avoid jitter
      scrollY += (targetScrollY - scrollY) * 0.08;

      // Total virtual sections = 3 (0,1,2)
      const sectionProgress = scrollY / window.innerHeight; // 0..N
      const cityFade = crossfade(0, sectionProgress); // (0 is city)
      const ringsFade = crossfade(1, sectionProgress);
      const housesFade = crossfade(2, sectionProgress);

      // Slight camera sway with pointer
      pointer.x += (pointer.tx - pointer.x) * 0.06;
      pointer.y += (pointer.ty - pointer.y) * 0.06;
      camera.position.x = pointer.x * 0.8;
      camera.position.y = 2.2 + pointer.y * 0.6;
      camera.lookAt(0, 0.8, 0);

      const t = clock.getElapsedTime();

      // CITY: rise buildings proportional to cityFade; gentle rotation
      const rise = Math.max(0.05, cityFade);
      cityGroup.rotation.y = t * 0.06 * cityFade;
      blocks.forEach((b) => {
        const fullH = (b.position.y / 0.5) * 1; // original half-height
        const scaleY = 0.1 + rise * fullH * 0.12;
        b.scale.y += (scaleY - b.scale.y) * 0.12;
      });
      setGroupOpacity(cityGroup, cityFade);

      // RINGS: rotate & pulse; sparks twinkle
      ringsGroup.rotation.y = t * 0.28 * (0.3 + ringsFade);
      ringsGroup.rotation.x = Math.sin(t * 0.3) * 0.1 * ringsFade;
      setGroupOpacity(ringsGroup, ringsFade);

      // sparks shimmer
      const spMat = sparks.material as THREE.PointsMaterial;
      spMat.size = 0.06 + Math.sin(t * 3) * 0.02 * ringsFade;

      // HOUSES: orbit & bob
      housesGroup.rotation.y = -t * 0.22 * (0.4 + housesFade);
      housesGroup.position.y = Math.sin(t * 1.2) * 0.2 * housesFade;
      setGroupOpacity(housesGroup, housesFade);

      // Gentle global scale per group for extra depth
      cityGroup.scale.setScalar(0.95 + cityFade * 0.1);
      ringsGroup.scale.setScalar(0.9 + ringsFade * 0.2);
      housesGroup.scale.setScalar(0.9 + housesFade * 0.25);

      renderer.render(scene, camera);
    };
    tick();

    return () => {
      window.removeEventListener("resize", resize);
      window.removeEventListener("scroll", onScroll);
      window.removeEventListener("pointermove", onPointerMove);
      renderer.setAnimationLoop(null);
      renderer.dispose();
      scene.traverse((obj) => {
        const mesh = obj as THREE.Mesh;
        const m = mesh.material as
          | THREE.Material
          | THREE.Material[]
          | undefined;
        const g = mesh.geometry as THREE.BufferGeometry | undefined;
        if (m) {
          if (Array.isArray(m)) m.forEach((mm) => mm.dispose());
          else m.dispose();
        }
        if (g) g.dispose();
      });
    };
  }, []);

  return (
    <>
      {/* Fixed WebGL background */}
      <canvas ref={canvasRef} id="bg" />

      {/* Overlay content */}
      <main className="wrap">
        <header className="nav">
          <div className="brand">Ceyhun Tunalı &amp; Sons</div>
          <nav className="links">
            <a href="#vizyon">Vizyon</a>
            <a href="#projeler">Projeler</a>
            <a href="#iletisim" className="cta">
              Teklif Al
            </a>
          </nav>
        </header>

        {/* Sections map to our 3D crossfades: 0,1,2 */}
        <section className="hero">
          <div className="panel">
            <h1>Yüksek Performanslı Mimari Deneyimler</h1>
            <p>
              3D ve etkileşimli arayüzlerle markanızı <strong>farklı</strong>{" "}
              kılıyoruz. Kaydırın; sahne sizin!
            </p>
            <a className="btn" href="#vizyon">
              Keşfet
            </a>
          </div>
        </section>

        <section id="vizyon" className="sect">
          <div className="panel">
            <h2>Vizyonumuz</h2>
            <p>
              Veri ile beslenen tasarım, üretime hazır kod ve kusursuz akışlar.
              Şehir ölçeğinde deneyimlerden mikro etkileşimlere kadar
              <em> bütüncül</em> bir yaklaşım.
            </p>
          </div>
        </section>

        <section id="projeler" className="sect">
          <div className="panel">
            <h2>Projeler</h2>
            <p>
              Konut, villa, site ve ticari yapılar… İleri 3D sahnelerle proje
              hikâyesini <strong>anlatan</strong> web deneyimleri.
            </p>
          </div>
        </section>

        <section id="iletisim" className="sect last">
          <div className="panel">
            <h2>İletişim</h2>
            <p>
              Birlikte etkileyici bir landing sayfası tasarlayalım. Üretime
              hazır, performans odaklı ve şık.
            </p>
            <a className="btn" href="mailto:office@ctscyprushomes.com">
              Bize Yazın
            </a>
          </div>
        </section>

        <footer className="foot">
          © {new Date().getFullYear()} Ceyhun Tunalı &amp; Sons — Tüm hakları
          saklıdır.
        </footer>
      </main>

      {/* Styles (scoped + a few globals) */}
      <style jsx global>{`
        :root {
          --bg: #0b0b12;
          --ink: #f8f9fa;
          --muted: #b7c0d1;
          --brand: #4cc9f0;
          --accent: #f72585;
          --glass: rgba(17, 18, 28, 0.55);
          --stroke: rgba(255, 255, 255, 0.08);
        }
        * {
          box-sizing: border-box;
        }
        html,
        body {
          height: 100%;
          background: radial-gradient(1200px 700px at 65% 20%, #121222, #0a0a12),
            var(--bg);
          color: var(--ink);
          margin: 0;
          font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto,
            "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji",
            "Segoe UI Emoji";
          overscroll-behavior-y: none;
        }
        #bg {
          position: fixed;
          inset: 0;
          width: 100%;
          height: 100%;
          display: block;
          z-index: 0;
        }
        .wrap {
          position: relative;
          z-index: 1;
        }
        .nav {
          position: sticky;
          top: 0;
          display: flex;
          align-items: center;
          justify-content: space-between;
          gap: 16px;
          padding: 18px 24px;
          backdrop-filter: blur(10px);
          background: linear-gradient(
            to bottom,
            rgba(10, 10, 18, 0.8),
            transparent
          );
          border-bottom: 1px solid var(--stroke);
        }
        .brand {
          font-weight: 700;
          letter-spacing: 0.3px;
        }
        .links a {
          color: var(--muted);
          text-decoration: none;
          margin-left: 16px;
          transition: color 0.25s ease;
        }
        .links a:hover {
          color: var(--ink);
        }
        .links a.cta {
          color: white;
          padding: 8px 14px;
          border-radius: 999px;
          background: linear-gradient(90deg, var(--brand), var(--accent));
          border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .hero,
        .sect {
          min-height: 100vh;
          display: grid;
          place-items: center;
          padding: 80px 24px;
        }
        .hero .panel {
          max-width: 860px;
          text-align: center;
          padding: 28px 24px;
          border-radius: 16px;
          background: linear-gradient(
            180deg,
            rgba(20, 20, 34, 0.5),
            rgba(10, 10, 18, 0.3)
          );
          border: 1px solid var(--stroke);
          box-shadow: 0 10px 50px rgba(0, 0, 0, 0.35);
        }
        .panel {
          max-width: 620px;
          width: 100%;
          background: var(--glass);
          border: 1px solid var(--stroke);
          border-radius: 18px;
          padding: 24px 22px;
          backdrop-filter: blur(10px);
        }
        h1 {
          font-size: clamp(32px, 4.4vw, 64px);
          line-height: 1.05;
          margin: 0 0 12px 0;
          letter-spacing: -0.5px;
        }
        h2 {
          font-size: clamp(26px, 3.2vw, 44px);
          margin: 0 0 8px 0;
        }
        p {
          color: var(--muted);
          font-size: clamp(16px, 1.25vw, 18px);
          line-height: 1.6;
          margin: 0 0 18px 0;
        }
        .btn {
          display: inline-block;
          padding: 10px 16px;
          border-radius: 12px;
          text-decoration: none;
          color: white;
          border: 1px solid rgba(255, 255, 255, 0.18);
          background: linear-gradient(90deg, var(--brand), var(--accent));
          box-shadow: 0 10px 30px rgba(247, 37, 133, 0.25);
        }

        /* Give each section a subtle alignment difference to avoid overlap */
        #vizyon .panel,
        #projeler .panel,
        #iletisim .panel {
          margin-left: auto;
          max-width: min(45rem, 88vw);
        }
        #projeler .panel {
          margin-right: auto;
          margin-left: 0;
        }

        .last {
          padding-bottom: 140px;
        }
        .foot {
          text-align: center;
          color: var(--muted);
          padding: 24px;
        }

        @media (max-width: 880px) {
          .links {
            display: none;
          }
          #projeler .panel {
            margin-left: auto;
          }
        }
      `}</style>
    </>
  );
}
